{
  "wordpress-components-animate": {
    "prefix": "wp-animate",
    "body": [
      "<BaseControl id=\"textarea-1\" label=\"Text\" help=\"Enter some text\">",
      "\t<textarea id=\"textarea-1\" />",
      "</BaseControl>"
    ]
  },
  "wordpress-components-button-group": {
    "prefix": "wp-button-group",
    "body": [
      "<ButtonGroup>",
      "\t<Button>$1</Button>",
      "\t<Button>$0</Button>",
      "</ButtonGroup>"
    ]
  },
  "wordpress-components-button": {
    "prefix": "wp-button",
    "body": [
      "<Button>$0</Button>"
    ]
  },
  "wordpress-components-checkbox-control": {
    "prefix": "wp-checkbox-control",
    "body": [
      "<CheckboxControl",
      "\tchecked={ isChecked }",
      "\theading=\"User\"",
      "\thelp=\"Is the user a author or not?\"",
      "\tlabel=\"Is author\"",
      "\tonChange={ ( isChecked ) => { setState( { isChecked } ) } }",
      "/>"
    ]
  },
  "wordpress-components-clipboard-button": {
    "prefix": "wp-clipboard-button",
    "body": [
      "<ClipboardButton",
      "\tisPrimary",
      "\tonCopy={ () => setState( { hasCopied: true } ) }",
      "\tonFinishCopy={ () => setState( { hasCopied: false } ) }",
      "\ttext=\"Text to be copied.\"",
      ">",
      "\t{ hasCopied ? 'Copied!' : 'Copy Text' }",
      "</ClipboardButton>"
    ]
  },
  "wordpress-components-color-indicator": {
    "prefix": "wp-color-indicator",
    "body": [
      "<ColorIndicator colorValue=\"#f00\" />"
    ]
  },
  "wordpress-components-color-palette": {
    "prefix": "wp-color-palette",
    "body": [
      "<ColorPalette",
      "\tcolors={ colors }",
      "\tonChange={ ( color ) => setState( { color } ) }",
      "\tvalue={ color }",
      "/>"
    ]
  },
  "wordpress-components-color-picker": {
    "prefix": "wp-color-picker",
    "body": [
      "<ColorPicker",
      "\tcolor={ color }",
      "\tdisableAlpha",
      "\tonChangeComplete={ ( value ) => setState( value.hex ) }",
      "/>"
    ]
  },
  "wordpress-components-dashicon": {
    "prefix": "wp-dashicon",
    "body": [
      "<Dashicon icon=\"$0\" />"
    ]
  },
  "wordpress-components-date-time-picker": {
    "prefix": "wp-date-time-picker",
    "body": [
      "<DateTimePicker",
      "\tcurrentDate={ date }",
      "\tonChange={ ( date ) => setState( { date } ) }",
      "\tis12Hour={ is12HourTime }",
      "/>"
    ]
  },
  "wordpress-components-disabled": {
    "prefix": "wp-disabled",
    "body": [
      "<Disabled>$0</Disabled>"
    ]
  },
  "wordpress-components-draggable": {
    "prefix": "wp-draggable",
    "body": [
      "<Draggable",
      "\telementId=\"draggable-panel\"",
      "\ttransferData={ { } }",
      ">",
      "{",
      "\t( { onDraggableStart, onDraggableEnd } ) => (",
      "\t\t<Dashicon",
      "\t\t\tdraggable",
      "\t\t\ticon=\"move\"",
      "\t\t\tonDragEnd={ onDraggableEnd }",
      "\t\t\tonDragStart={ onDraggableStart }",
      "\t\t/>",
      "\t)",
      "}",
      "</Draggable>"
    ]
  },
  "wordpress-components-dropdown-menu": {
    "prefix": "wp-dropdown-menu",
    "body": [
      "<DropdownMenu",
      "\tcontrols={ [$0] }",
      "\ticon=\"move\"",
      "\tlabel=\"Select a direction\"",
      "/>"
    ]
  },
  "wordpress-components-dropdown": {
    "prefix": "wp-dropdown",
    "body": [
      "<Dropdown",
      "\tclassName=\"my-container-class-name\"",
      "\tcontentClassName=\"my-popover-content-classname\"",
      "\tposition=\"bottom right\"",
      "\trenderToggle={ ( { isOpen, onToggle } ) => (",
      "\t\t<Button isPrimary onClick={ onToggle } aria-expanded={ isOpen }>",
      "\t\t\tToggle Popover!",
      "\t\t</Button>",
      "\t) }",
      "\trenderContent={ () => (",
      "\t\t<div>",
      "\t\t\tThis is the content of the popover.",
      "\t\t</div>",
      "\t) }",
      "/>"
    ]
  },
  "wordpress-components-dropzone": {
    "prefix": "wp-dropzone",
    "body": [
      "<DropZoneProvider>",
      "\t<div>",
      "\t\t{ hasDropped ? 'Dropped!' : 'Drop something here' }",
      "\t\t<DropZone",
      "\t\t\tonDrop={ () => setState( { hasDropped: true } ) }",
      "\t\t\tonFilesDrop={ () => setState( { hasDropped: true } ) }",
      "\t\t\tonHTMLDrop={ () => setState( { hasDropped: true } )  }",
      "\t\t/>",
      "\t</div>",
      "</DropZoneProvider>"
    ]
  },
  "wordpress-components-external-link": {
    "prefix": "wp-external-link",
    "body": [
      "<ExternalLink href=\"$0\">$1</ExternalLink>"
    ]
  },
  "wordpress-components-focal-point-picker": {
    "prefix": "wp-focal-point-picker",
    "body": [
      "<FocalPointPicker",
      "\tdimensions={ dimensions }",
      "\tonChange={ ( focalPoint ) => setState( { focalPoint } ) }",
      "\turl={ url }",
      "\tvalue={ focalPoint }",
      "/>"
    ]
  },
  "wordpress-components-focusable-iframe": {
    "prefix": "wp-focusable-iframe",
    "body": [
      "<FocusableIframe",
      "\tsrc=\"$0\"",
      "\tonFocus={ () => console.log( 'Focused' ) }",
      "/>"
    ]
  },
  "wordpress-components-font-size-picker": {
    "prefix": "wp-font-size-picker",
    "body": [
      "<FontSizePicker",
      "\tfontSizes={ fontSizes }",
      "\tvalue={ fontSize }",
      "\tfallbackFontSize={ fallbackFontSize }",
      "\tonChange={ ( newFontSize ) => {",
      "\t\tsetState( { fontSize: newFontSize } );",
      "\t} }",
      "/>"
    ]
  },
  "wordpress-components-form-file-upload": {
    "prefix": "wp-form-file-upload",
    "body": [
      "<FormFileUpload",
      "\taccept=\"image/*\"",
      "\tonChange={ () => console.log('Upload') }",
      ">",
      "\tUpload",
      "</FormFileUpload>"
    ]
  },
  "wordpress-components-form-toggle": {
    "prefix": "wp-form-toggle",
    "body": [
      "<FormToggle",
      "\tchecked={ checked }",
      "\tonChange={ () => setState( state => ( { checked: ! state.checked } ) ) }",
      "/>"
    ]
  },
  "wordpress-components-form-token-field": {
    "prefix": "wp-form-token-field",
    "body": [
      "<FormTokenField",
      "\tonChange={ tokens => setState( { tokens } ) }",
      "\tplaceholder=\"Type a continent\"",
      "\tsuggestions={ suggestions }",
      "\tvalue={ tokens }",
      "/>"
    ]
  },
  "wordpress-components-icon-button": {
    "prefix": "wp-icon-button",
    "body": [
      "<IconButton icon=\"ellipsis\" label=\"More\" />"
    ]
  },
  "wordpress-components-icon": {
    "prefix": "wp-icon",
    "body": [
      "<Icon icon={ $0 } />"
    ]
  },
  "wordpress-components-isolated-event-container": {
    "prefix": "wp-isolated-event-container",
    "body": [
      "<IsolatedEventContainer onClick={ clickHandler }>",
      "\t<p>This is an isolated component</p>",
      "</IsolatedEventContainer>"
    ]
  },
  "wordpress-components-keyboard-shortcuts": {
    "prefix": "wp-keyboard-shortcuts",
    "body": [
      "<KeyboardShortcuts shortcuts={ {",
      "\t'mod+a': selectAll,$0",
      "} } />"
    ]
  },
  "wordpress-components-menu-group": {
    "prefix": "wp-menu-group",
    "body": [
      "<MenuGroup label=\"Settings\">",
      "\t<MenuItem>$1</MenuItem>",
      "\t<MenuItem>$0</MenuItem>",
      "</MenuGroup>"
    ]
  },
  "wordpress-components-menu-item-choice": {
    "prefix": "wp-menu-item-choice",
    "body": [
      "<MenuGroup label=\"Editor\">",
      "\t<MenuItemsChoice",
      "\t\tchoices={ choices }",
      "\t\tvalue={ mode }",
      "\t\tonSelect={ mode => setState( { mode } ) }",
      "\t/>",
      "</MenuGroup>"
    ]
  },
  "wordpress-components-menu-item": {
    "prefix": "wp-menu-item",
    "body": [
      "<MenuItem",
      "\ticon={ isActive ? 'yes' : 'no' }",
      "\tisSelected={ isActive }",
      "\tonClick={ () => setState( state => ( { isActive: ! state.isActive } ) ) }",
      ">",
      "\t$0",
      "</MenuItem>"
    ]
  },
  "wordpress-components-modal": {
    "prefix": "wp-modal",
    "body": [
      "<Button isDefault onClick={ () => setState( { isOpen: true } ) }>",
      "\tOpen Modal",
      "</Button>",
      "{ isOpen && (",
      "\t<Modal",
      "\t\ttitle=\"This is my modal\"",
      "\t\tonRequestClose={ () => setState( { isOpen: false } ) }",
      "\t>",
      "\t\t$0",
      "\t</Modal>",
      ") }"
    ]
  },
  "wordpress-components-navigable-container": {
    "prefix": "wp-navigable-container",
    "body": [
      "<span>Navigable Menu:</span>",
      "<NavigableMenu onNavigate={ onNavigate } orientation=\"horizontal\">",
      "\t<Button isDefault>Item 1</Button>",
      "\t<Button isDefault>Item 2</Button>",
      "\t<Button isDefault>Item 3</Button>",
      "</NavigableMenu>",
      "",
      "<span>Tabbable Container:</span>",
      "<TabbableContainer onNavigate={ onNavigate }>",
      "\t<Button isDefault tabIndex=\"0\">Section 1</Button>",
      "\t<Button isDefault tabIndex=\"0\">Section 2</Button>",
      "\t<Button isDefault tabIndex=\"0\">Section 3</Button>",
      "\t<Button isDefault tabIndex=\"0\">Section 4</Button>",
      "</TabbableContainer>"
    ]
  },
  "wordpress-components-notice": {
    "prefix": "wp-notice",
    "body": [
      "<Notice status=\"error\">",
      "\tAn unknown error occurred.",
      "</Notice>"
    ]
  },
  "wordpress-components-panel": {
    "prefix": "wp-panel",
    "body": [
      "<Panel header=\"My Panel\">",
      "\t<PanelBody",
      "\t\ticon=\"welcome-widgets-menus\"",
      "\t\tinitialOpen={ true }",
      "\t\ttitle=\"My Block Settings\"",
      "\t>",
      "\t\t<PanelRow>",
      "\t\t\tMy Panel Inputs and Labels",
      "\t\t</PanelRow>",
      "\t</PanelBody>",
      "</Panel>"
    ]
  },
  "wordpress-components-placeholder": {
    "prefix": "wp-placeholder",
    "body": [
      "<Placeholder icon=\"wordpress-alt\" label=\"Placeholder\" />"
    ]
  },
  "wordpress-components-popover": {
    "prefix": "wp-popover",
    "body": [
      "<Button isDefault onClick={ toggleVisible }>",
      "\tToggle Popover!",
      "\t{ isVisible && (",
      "\t\t<Popover>",
      "\t\t\tPopover is toggled!",
      "\t\t</Popover>",
      "\t) }",
      "</Button>"
    ]
  },
  "wordpress-components-query-controls": {
    "prefix": "wp-query-controls",
    "body": [
      "<QueryControls",
      "\t{ ...{ orderBy, order, numberOfItems } }",
      "\tonOrderByChange={ ( orderBy ) => setState( { orderBy } ) }",
      "\tonOrderChange={ ( order ) => setState( { order } ) }",
      "\tcategoriesList={ categories }",
      "\tselectedCategoryId={ category }",
      "\tonCategoryChange={ ( category ) => setState( { category } ) }",
      "\tonNumberOfItemsChange={ ( numberOfItems ) => setState( { numberOfItems } ) }",
      "/>"
    ]
  },
  "wordpress-components-radio-control": {
    "prefix": "wp-radio-control",
    "body": [
      "<RadioControl",
      "\thelp=\"The type of the current user\"",
      "\tlabel=\"User type\"",
      "\toptions={ [",
      "\t\t{ label: 'Author', value: 'a' },",
      "\t\t{ label: 'Editor', value: 'e' },",
      "\t] }",
      "\tonChange={ ( option ) => { setState( { option } ) } }",
      "\tselected={ option }",
      "/>"
    ]
  },
  "wordpress-components-resizable-box": {
    "prefix": "wp-resizable-box",
    "body": [
      "<ResizableBox",
      "\tsize={ {",
      "\t\theight,",
      "\t\twidth,",
      "\t} }",
      "\tminHeight=\"50\"",
      "\tminWidth=\"50\"",
      "\tenable={ {",
      "\t\tbottom: true,",
      "\t\tbottomLeft: false,",
      "\t\tbottomRight: true,",
      "\t\tleft: false,",
      "\t\tright: true,",
      "\t\ttop: false,",
      "\t\ttopLeft: false,",
      "\t\ttopRight: false,",
      "\t} }",
      "\tonResizeStop={ ( event, direction, elt, delta ) => {",
      "\t\tsetAttributes( {",
      "\t\t\theight: parseInt( height + delta.height, 10 ),",
      "\t\t\twidth: parseInt( width + delta.width, 10 ),",
      "\t\t} );",
      "\t\ttoggleSelection( true );",
      "\t} }",
      "\tonResizeStart={ () => {",
      "\t\ttoggleSelection( false );",
      "\t} }",
      "/>"
    ]
  },
  "wordpress-components-responsive-wrapper": {
    "prefix": "wp-responsive-wrapper",
    "body": [
      "<ResponsiveWrapper",
      "\tnaturalWidth={ 2000 }",
      "\tnaturalHeight={ 680 }",
      ">",
      "\t$0",
      "</ResponsiveWrapper>"
    ]
  },
  "wordpress-components-sandbox": {
    "prefix": "wp-sandbox",
    "body": [
      "<SandBox",
      "\thtml=\"<p>Content</p>\"",
      "\ttitle=\"Sandbox\"",
      "\ttype=\"embed\"",
      "/>"
    ]
  },
  "wordpress-components-scrolllock": {
    "prefix": "wp-scrolllock",
    "body": [
      "<ScrollLock />"
    ]
  },
  "wordpress-components-select-control": {
    "prefix": "wp-select-control",
    "body": [
      "<SelectControl",
      "\tlabel=\"Size\"",
      "\toptions={ [ $0 ] }",
      "\tonChange={ ( size ) => { setState( { size } ) } }",
      "\tvalue={ size }",
      "/>"
    ]
  },
  "wordpress-components-slot-fill": {
    "prefix": "wp-slot-fill",
    "body": [
      "const Example = () => {",
      "\tconst MyPanelSlot = () => (",
      "\t\t<Panel header=\"Panel with slot\">",
      "\t\t\t<PanelBody>",
      "\t\t\t\t<Slot name=\"MyPanelSlot\"/>",
      "\t\t\t</PanelBody>",
      "\t\t</Panel>",
      "\t);",
      "",
      "\tMyPanelSlot.Content = () => (",
      "\t\t<Fill name=\"MyPanelSlot\">",
      "\t\t\tPanel body",
      "\t\t</Fill>",
      "\t);",
      "",
      "\treturn (",
      "\t\t<SlotFillProvider>",
      "\t\t\t<MyPanelSlot />",
      "\t\t\t<MyPanelSlot.Content />",
      "\t\t</SlotFillProvider>",
      "\t);",
      "};"
    ]
  },
  "wordpress-components-snackbar": {
    "prefix": "wp-snackbar",
    "body": [
      "<Snackbar>$0</Snackbar>"
    ]
  },
  "wordpress-components-spinner": {
    "prefix": "wp-spinner",
    "body": [
      "<Spinner />"
    ]
  },
  "wordpress-components-tab-panel": {
    "prefix": "wp-tab-panel",
    "body": [
      "<TabPanel className=\"my-tab-panel\"",
      "\tactiveClass=\"active-tab\"",
      "\tonSelect={ onSelect }",
      "\ttabs={ [ $0 ] }",
      ">",
      "\t{",
      "\t\t( tab ) => <p>{ tab.title }</p>",
      "\t}",
      "</TabPanel>"
    ]
  },
  "wordpress-components-text-control": {
    "prefix": "wp-text-control",
    "body": [
      "<TextControl",
      "    label=\"Additional CSS Class\"",
      "    onChange={ ( className ) => setState( { className } ) }",
      "    value={ className }",
      "/>"
    ]
  },
  "wordpress-components-textarea-control": {
    "prefix": "wp-textarea-control",
    "body": [
      "<TextareaControl",
      "    help=\"Enter some text\"",
      "    label=\"Text\"",
      "    onChange={ ( text ) => setState( { text } ) }",
      "    value={ text }",
      "/>"
    ]
  },
  "wordpress-components-toggle-control": {
    "prefix": "wp-toggle-control",
    "body": [
      "<ToggleControl",
      "    help={ hasFixedBackground ? 'Has fixed background.' : 'No fixed background.' }",
      "    label=\"Fixed Background\"",
      "    checked={ hasFixedBackground }",
      "    onChange={ () => setState( ( state ) => ( { hasFixedBackground: ! state.hasFixedBackground } ) ) }",
      "/>"
    ]
  },
  "wordpress-components-toolbar": {
    "prefix": "wp-toolbar",
    "body": [
      "const Example = withState( {",
      "\tactiveControl: 'up',",
      "} )( ( { activeControl, setState } ) => {",
      "\tfunction createThumbsControl( thumbs ) {",
      "\t\treturn {",
      "\t\t\ticon: `thumbs-${ thumbs }`,",
      "\t\t\ttitle: `Thumbs ${ thumbs }`,",
      "\t\t\tisActive: activeControl === thumbs,",
      "\t\t\tonClick: () => setState( { activeControl: thumbs } ),",
      "\t\t};",
      "\t}",
      "",
      "\treturn (",
      "\t\t<Toolbar controls={ [ 'up', 'down' ].map( createThumbsControl ) } />",
      "\t);",
      "} );"
    ]
  },
  "wordpress-components-tooltip": {
    "prefix": "wp-tooltip",
    "body": [
      "<Tooltip text=\"More information\">",
      "\t<span>Hover</span>",
      "</Tooltip>"
    ]
  },
  "wordpress-components-tree-select": {
    "prefix": "wp-tree-select",
    "body": [
      "const Example = withState( {",
      "\tpage: 'p21',",
      "} )( ( { page, setState } ) => (",
      "\t<TreeSelect",
      "\t\tlabel=\"Parent page\"",
      "\t\tnoOptionLabel=\"No parent page\"",
      "\t\tonChange={ ( page ) => setState( { page } ) }",
      "\t\tselectedId={ page }",
      "\t\ttree={ [",
      "\t\t\t{",
      "\t\t\t\tname: 'Page 1',",
      "\t\t\t\tid: 'p1',",
      "\t\t\t\tchildren: [",
      "\t\t\t\t\t{ name: 'Descend 1 of page 1', id: 'p11' },",
      "\t\t\t\t\t{ name: 'Descend 2 of page 1', id: 'p12' },",
      "\t\t\t\t],",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tname: 'Page 2',",
      "\t\t\t\tid: 'p2',",
      "\t\t\t\tchildren: [",
      "\t\t\t\t\t{",
      "\t\t\t\t\t\tname: 'Descend 1 of page 2',",
      "\t\t\t\t\t\tid: 'p21',",
      "\t\t\t\t\t\tchildren: [",
      "\t\t\t\t\t\t\t{",
      "\t\t\t\t\t\t\t\tname: 'Descend 1 of Descend 1 of page 2',",
      "\t\t\t\t\t\t\t\tid: 'p211',",
      "\t\t\t\t\t\t\t},",
      "\t\t\t\t\t\t],",
      "\t\t\t\t\t},",
      "\t\t\t\t],",
      "\t\t\t},",
      "\t\t] }",
      "\t/>",
      ") );"
    ]
  }
}